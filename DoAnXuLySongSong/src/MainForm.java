
import java.awt.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Random;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author PY
 */
public class MainForm extends javax.swing.JFrame {

    /**
     * Creates new form MainForm
     */
    public MainForm() {
        initComponents();
        this.setTitle("XU LY SONG SONG - CT5-T79 - DETAI10 - JAVA - MERGESORT - USING THREAD");
        this.setLocationRelativeTo(null);
        txt0.setEnabled(false);
        txtMaxValue.setEnabled(false);
        jTextArea1.setLineWrap(true);
        jTextArea1.setWrapStyleWord(true);
        jTextArea2.setLineWrap(true);
        jTextArea2.setWrapStyleWord(true);
    }
    private int[] randomListNumber(int arrSize, int numSize){
        int[] unsorted = new int[arrSize];
        int max = 0;
        Random randomizer = new Random();

        for ( int i = 0; i < arrSize; i++ ) {
            unsorted[i] = randomizer.nextInt( numSize ); //100 //1000
        }
        max = unsorted[0];
        jTextArea1.setText(Arrays.toString(unsorted));
        for (int i = 0; i < unsorted.length; i++) {
            if(unsorted[i] > max){
                max = unsorted[i];
            }
        }
        txtMaxValue.setText(String.valueOf(max));
        return unsorted;
    }
    private int[] hihi(int[] unsorted, int arrSize){
        ArrayList<Future> futures = new ArrayList<>();
        int processorCount = 4;
        int batchSize = arrSize/processorCount;
        //du
        int duSize = arrSize%processorCount;
        System.out.println(duSize);
        jTextArea1.setText(String.valueOf(batchSize));
        long startTime = System.currentTimeMillis();
        // create ExecutorService
        final ExecutorService executorService = Executors.newFixedThreadPool(processorCount);
        final ExecutorService executorService1 = Executors.newFixedThreadPool(1);
        ArrayList<Merger> mergers = new ArrayList<>();
        ArrayList<Merger> mer2 = new ArrayList<>();
        for (int i = 0; i < processorCount; i++) {
            int[] part = new int[(batchSize)];


            System.arraycopy( unsorted, i*batchSize, part, 0, batchSize );
            // create merger
            Merger merger = new Merger(part);

            futures.add(executorService.submit(merger));
            //add merger to list to get result in future
            mergers.add(merger);
        }//
            int[] part1 = new int[(duSize)];
            System.arraycopy( unsorted, duSize, part1, 0, duSize );
            Merger merger2 = new Merger(part1);
            futures.add(executorService.submit(merger2));
            //add merger to list to get result in future
            mer2.add(merger2);
        //
        for (Future<Double> future : futures) {
            try {
                future.get();
            } catch (InterruptedException ex) {
                Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ExecutionException ex) {
                Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        executorService.shutdown();
        executorService1.shutdown();
        int j = 0;
        // array to get result
        int[] mergered = new int[arrSize];
        int[] dumer = new int[duSize];
        int [] allmer = new int[arrSize];
        // sequential merge of all part of array
        for (Merger merger:mergers){
            if (j == 0) {
                mergered = merger.getSorted();
                j++;
            }
        else{
                int[] part = merger.getSorted();
                mergered = SimpleMerger.merge( mergered, part);
            }
   }
        int k =0;
        for(Merger m : mer2){
            if (k == 0) {
                dumer = m.getSorted();
                k++;
            }
        else{
                int[] part11 = m.getSorted();
                dumer = SimpleMerger.merge(dumer, part11);
            }
        }
        allmer = SimpleMerger.merge(mergered, dumer);
        return allmer;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    private int[] mergeSortNonThread(int[] unsorted, int arrSize){
        long startTime = System.currentTimeMillis();
        SimpleMerger s =new SimpleMerger(unsorted);
        int[] sorted = new int[arrSize];
        s.sort();
        int middle;
        int[] left, right;
        // array is sorted
        if ( unsorted.length <= 1 ) {
            sorted = unsorted;
        } else {
            //
            middle = unsorted.length / 2;
            left = new int[middle];
            right = new int[unsorted.length - middle];
            //split array on two
            System.arraycopy(unsorted, 0, left, 0, middle);
            System.arraycopy(unsorted, middle, right, 0, unsorted.length - middle);
            SimpleMerger leftSort = new SimpleMerger(left);
            SimpleMerger rightSort = new SimpleMerger(right);
            leftSort.sort();
            rightSort.sort();
            //sort and merge
            sorted = SimpleMerger.merge(leftSort.getSorted(), rightSort.getSorted());
         }
        long timeSpent = System.currentTimeMillis() - startTime;
        time.setText(String.valueOf(timeSpent+ " miliseconds"));
        return sorted;
    }
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        time = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        txtArrsize = new javax.swing.JTextField();
        txtNumSize = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txt0 = new javax.swing.JTextField();
        jButton5 = new javax.swing.JButton();
        txtMaxValue = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        typeofsort = new javax.swing.JLabel();
        jButton6 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Monospaced", 1, 18)); // NOI18N
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jButton1.setText("Sort (using threads)");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jButton2.setText("Sort (non-thread)");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jButton3.setText("Random List");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jTextArea2.setColumns(20);
        jTextArea2.setFont(new java.awt.Font("Monospaced", 1, 18)); // NOI18N
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        time.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        time.setForeground(new java.awt.Color(255, 0, 51));

        jButton4.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jButton4.setText("Reset");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jLabel1.setText("Kết quả sau khi Sort :");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jLabel3.setText("Thời gian thực thi :");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jLabel4.setText("Kết quả Random :");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Random Options", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N

        txtArrsize.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        txtArrsize.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtArrsizeKeyPressed(evt);
            }
        });

        txtNumSize.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        txtNumSize.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtNumSizeKeyPressed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jLabel2.setText("Số lượng số cần random :");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jLabel5.setText("Mỗi số có giá trị từ :");

        txt0.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        txt0.setText("0 -");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel5))
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtArrsize)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(txt0, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtNumSize, javax.swing.GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtArrsize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txt0, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNumSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jButton5.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jButton5.setText("Close");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        txtMaxValue.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jLabel6.setText("Max Value :");

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jLabel7.setText("Đang chọn :");

        typeofsort.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        typeofsort.setForeground(new java.awt.Color(255, 0, 0));

        jButton6.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jButton6.setText("Sort (multi-threads)");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(29, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2)
                        .addGap(18, 18, 18)
                        .addComponent(jButton6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel3)
                        .addGap(37, 37, 37)
                        .addComponent(time, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jButton3)
                                .addGap(18, 18, 18)
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 885, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel4)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel6)
                                    .addGap(45, 45, 45)
                                    .addComponent(txtMaxValue, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 885, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(typeofsort, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(28, 28, 28))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(62, 62, 62)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(typeofsort))
                        .addGap(1, 1, 1)
                        .addComponent(jButton3)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 45, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtMaxValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3)
                    .addComponent(time, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton4)
                    .addComponent(jButton5)
                    .addComponent(jButton6))
                .addGap(43, 43, 43))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        if(txtArrsize.getText().equals("") || txtNumSize.getText().equals("")){
            JOptionPane.showMessageDialog(this, "Nhap so luong so can random!");
            return;
        }
        if(Integer.valueOf(txtArrsize.getText()) > 500000){
            if(JOptionPane.showConfirmDialog(this, "Ung dung chay muot ma voi du lieu < 500.000 so, neu tiep tuc co the gay ra cham, lag. Muon tiep tuc ? (Y/N)")!=JOptionPane.OK_OPTION){
                return;
            }
        }
        jTextArea1.setText("");
        jTextArea2.setText("");
        typeofsort.setText("");
        time.setText("");
        int arrSize = Integer.valueOf(txtArrsize.getText().trim());
        int numSize = Integer.valueOf(txtNumSize.getText().trim());
        randomListNumber(arrSize, numSize); //1000 100000);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed


            if(jTextArea1.getText().equals("")){
                JOptionPane.showMessageDialog(this, "Random list truoc!");
                return;
            }
            typeofsort.setText("Sort using thread");
            time.setText("");
            jTextArea2.setText("");
            String list = jTextArea1.getText();
            list = list.substring(1);
            list = list.substring(0, list.length()-1);
            String[] listnum = list.split(", ");
            
            int[] result = new int[listnum.length];
            for (int i = 0; i < listnum.length; i++) {
                result[i] = Integer.parseInt(listnum[i]);
            }
            int[] sortedd = new int[Integer.valueOf(txtArrsize.getText())];
            long startTime = System.currentTimeMillis();
            /*int[] sortedd = new int[Integer.valueOf(txtArrsize.getText())];
            //sortedd = mergeSortThread(result);
            Merger m = new Merger(result);
            Runnable run = new Merger(result);
            Thread t = new Thread(run);
            t.start();
            long tt = 0;
            long ttt = m.getTime(tt);
            long timeSpent = System.currentTimeMillis() - startTime;
            long totalTime = timeSpent+ttt;
            System.out.println(timeSpent);
            System.out.println(ttt);
            System.out.println(totalTime);
            System.out.println("Thread start...");*/
            Merger m = new Merger(result);
            Thread t = new Thread(m);
            t.start();
            System.out.println(t.currentThread().getName());
            sortedd = m.getSorted2(sortedd);
            long timeSpent = System.currentTimeMillis() - startTime;
            time.setText(String.valueOf(timeSpent) + " miliseconds");
            jTextArea2.setText(Arrays.toString((sortedd)));
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if(jTextArea1.getText().equals("")){
            JOptionPane.showMessageDialog(this, "Random list truoc!");
            return;
        }
        typeofsort.setText("Sort using non-thread");
        time.setText("");
        jTextArea2.setText("");
        String list = jTextArea1.getText();
        list = list.substring(1);
        list = list.substring(0, list.length()-1);
        String[] listnum = list.split(", ");
        
        int[] result = new int[listnum.length];
        for (int i = 0; i < listnum.length; i++) {
           result[i] = Integer.parseInt(listnum[i]);
        }
        int[] sortedd = mergeSortNonThread(result, Integer.valueOf(txtArrsize.getText()));
        jTextArea2.setText(Arrays.toString(sortedd));
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        jTextArea1.setText("");
        jTextArea2.setText("");
        txtArrsize.setText("");
        txtNumSize.setText("");
        time.setText("");
        typeofsort.setText("");
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jButton5ActionPerformed

    private void txtArrsizeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtArrsizeKeyPressed

            if (evt.getKeyChar() >= '0' && evt.getKeyChar() <= '9' || evt.getKeyCode()==8) {
               txtArrsize.setEditable(true);
            } else {
               txtArrsize.setEditable(false);
            }
    }//GEN-LAST:event_txtArrsizeKeyPressed

    private void txtNumSizeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNumSizeKeyPressed

            if (evt.getKeyChar() >= '0' && evt.getKeyChar() <= '9' || evt.getKeyCode()==8) {
               txtNumSize.setEditable(true);
            } else {
               txtNumSize.setEditable(false);
            }
    }//GEN-LAST:event_txtNumSizeKeyPressed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        typeofsort.setText("Sort (multi-threads)");
        String listt = jTextArea1.getText();
        listt = listt.substring(1);
        listt = listt.substring(0, listt.length()-1);
        String[] listnumm = listt.split(", ");
        int[] resultt = new int[listnumm.length];
        for (int i = 0; i < listnumm.length; i++) {
            resultt[i] = Integer.parseInt(listnumm[i]);
        }
        
        int[] sortedd2 = new int[Integer.valueOf(txtArrsize.getText())];
        int size = Integer.valueOf(txtArrsize.getText());
        long startTime = System.currentTimeMillis();
        sortedd2 = hihi(resultt, size);
        long timeSpen = System.currentTimeMillis() - startTime;
        time.setText(String.valueOf(timeSpen)+ " miliseconds");
        jTextArea2.setText(Arrays.toString(sortedd2));
        jTextArea1.setText(Arrays.toString(resultt));
    }//GEN-LAST:event_jButton6ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextField time;
    private javax.swing.JTextField txt0;
    private javax.swing.JTextField txtArrsize;
    private javax.swing.JTextField txtMaxValue;
    private javax.swing.JTextField txtNumSize;
    private javax.swing.JLabel typeofsort;
    // End of variables declaration//GEN-END:variables
}
